{"id":"node_modules/graphql-language-service-interface/dist/getOutline.js","dependencies":[{"name":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-interface/dist/getOutline.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/lindsayj/Documents/dev/css-vs-js/package.json","includedInParent":true,"mtime":1572464414593},{"name":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-interface/package.json","includedInParent":true,"mtime":1572464394178},{"name":"graphql","loc":{"line":3,"column":26},"parent":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-interface/dist/getOutline.js","resolved":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql/index.mjs"},{"name":"graphql-language-service-utils","loc":{"line":4,"column":49},"parent":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-interface/dist/getOutline.js","resolved":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-utils/dist/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst graphql_language_service_utils_1 = require(\"graphql-language-service-utils\");\nconst { INLINE_FRAGMENT } = graphql_1.Kind;\nconst OUTLINEABLE_KINDS = {\n    Field: true,\n    OperationDefinition: true,\n    Document: true,\n    SelectionSet: true,\n    Name: true,\n    FragmentDefinition: true,\n    FragmentSpread: true,\n    InlineFragment: true,\n};\nfunction getOutline(queryText) {\n    let ast;\n    try {\n        ast = graphql_1.parse(queryText);\n    }\n    catch (error) {\n        return null;\n    }\n    const visitorFns = outlineTreeConverter(queryText);\n    const outlineTrees = graphql_1.visit(ast, {\n        leave(node) {\n            if (OUTLINEABLE_KINDS.hasOwnProperty(node.kind) &&\n                visitorFns[node.kind]) {\n                return visitorFns[node.kind](node);\n            }\n            return null;\n        },\n    });\n    return { outlineTrees };\n}\nexports.getOutline = getOutline;\nfunction outlineTreeConverter(docText) {\n    const meta = (node) => ({\n        representativeName: node.name,\n        startPosition: graphql_language_service_utils_1.offsetToPosition(docText, node.loc.start),\n        endPosition: graphql_language_service_utils_1.offsetToPosition(docText, node.loc.end),\n        children: node.selectionSet || [],\n    });\n    return {\n        Field: (node) => {\n            const tokenizedText = node.alias\n                ? [buildToken('plain', node.alias), buildToken('plain', ': ')]\n                : [];\n            tokenizedText.push(buildToken('plain', node.name));\n            return { tokenizedText, ...meta(node) };\n        },\n        OperationDefinition: (node) => ({\n            tokenizedText: [\n                buildToken('keyword', node.operation),\n                buildToken('whitespace', ' '),\n                buildToken('class-name', node.name),\n            ],\n            ...meta(node),\n        }),\n        Document: (node) => node.definitions,\n        SelectionSet: (node) => concatMap(node.selections, (child) => {\n            return child.kind === INLINE_FRAGMENT ? child.selectionSet : child;\n        }),\n        Name: (node) => node.value,\n        FragmentDefinition: (node) => ({\n            tokenizedText: [\n                buildToken('keyword', 'fragment'),\n                buildToken('whitespace', ' '),\n                buildToken('class-name', node.name),\n            ],\n            ...meta(node),\n        }),\n        FragmentSpread: (node) => ({\n            tokenizedText: [\n                buildToken('plain', '...'),\n                buildToken('class-name', node.name),\n            ],\n            ...meta(node),\n        }),\n        InlineFragment: (node) => node.selectionSet,\n    };\n}\nfunction buildToken(kind, value) {\n    return { kind, value };\n}\nfunction concatMap(arr, fn) {\n    const res = [];\n    for (let i = 0; i < arr.length; i++) {\n        const x = fn(arr[i], i);\n        if (Array.isArray(x)) {\n            res.push(...x);\n        }\n        else {\n            res.push(x);\n        }\n    }\n    return res;\n}\n"},"sourceMaps":{"js":{"version":3,"file":"getOutline.js","sourceRoot":"","sources":["../src/getOutline.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"9b26e5456663cf2e5e68fe82f6697d4c","cacheData":{"env":{}}}