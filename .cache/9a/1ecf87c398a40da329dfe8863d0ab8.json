{"id":"node_modules/codemirror-graphql/mode.js","dependencies":[{"name":"/Users/lindsayj/Documents/dev/css-vs-js/package.json","includedInParent":true,"mtime":1572464414593},{"name":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/codemirror-graphql/package.json","includedInParent":true,"mtime":1572464394178},{"name":"codemirror","loc":{"line":3,"column":49},"parent":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/codemirror-graphql/mode.js","resolved":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/codemirror/lib/codemirror.js"},{"name":"graphql-language-service-parser","loc":{"line":5,"column":44},"parent":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/codemirror-graphql/mode.js","resolved":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-parser/dist/index.js"}],"generated":{"js":"\"use strict\";\n\nvar _codemirror = _interopRequireDefault(require(\"codemirror\"));\n\nvar _graphqlLanguageServiceParser = require(\"graphql-language-service-parser\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n *  Copyright (c) 2019 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/**\n * The GraphQL mode is defined as a tokenizer along with a list of rules, each\n * of which is either a function or an array.\n *\n *   * Function: Provided a token and the stream, returns an expected next step.\n *   * Array: A list of steps to take in order.\n *\n * A step is either another rule, or a terminal description of a token. If it\n * is a rule, that rule is pushed onto the stack and the parsing continues from\n * that point.\n *\n * If it is a terminal description, the token is checked against it using a\n * `match` function. If the match is successful, the token is colored and the\n * rule is stepped forward. If the match is unsuccessful, the remainder of the\n * rule is skipped and the previous rule is advanced.\n *\n * This parsing algorithm allows for incremental online parsing within various\n * levels of the syntax tree and results in a structured `state` linked-list\n * which contains the relevant information to produce valuable typeaheads.\n */\n_codemirror[\"default\"].defineMode('graphql', function (config) {\n  var parser = (0, _graphqlLanguageServiceParser.onlineParser)({\n    eatWhitespace: function eatWhitespace(stream) {\n      return stream.eatWhile(_graphqlLanguageServiceParser.isIgnored);\n    },\n    lexRules: _graphqlLanguageServiceParser.LexRules,\n    parseRules: _graphqlLanguageServiceParser.ParseRules,\n    editorConfig: {\n      tabSize: config.tabSize\n    }\n  });\n  return {\n    config: config,\n    startState: parser.startState,\n    token: parser.token,\n    indent: indent,\n    electricInput: /^\\s*[})\\]]/,\n    fold: 'brace',\n    lineComment: '#',\n    closeBrackets: {\n      pairs: '()[]{}\"\"',\n      explode: '()[]{}'\n    }\n  };\n});\n\nfunction indent(state, textAfter) {\n  var levels = state.levels; // If there is no stack of levels, use the current level.\n  // Otherwise, use the top level, pre-emptively dedenting for close braces.\n\n  var level = !levels || levels.length === 0 ? state.indentLevel : levels[levels.length - 1] - (this.electricInput.test(textAfter) ? 1 : 0);\n  return level * this.config.indentUnit;\n}"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/codemirror-graphql/mode.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}}],"sources":{"node_modules/codemirror-graphql/mode.js":"\"use strict\";\n\nvar _codemirror = _interopRequireDefault(require(\"codemirror\"));\n\nvar _graphqlLanguageServiceParser = require(\"graphql-language-service-parser\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n *  Copyright (c) 2019 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/**\n * The GraphQL mode is defined as a tokenizer along with a list of rules, each\n * of which is either a function or an array.\n *\n *   * Function: Provided a token and the stream, returns an expected next step.\n *   * Array: A list of steps to take in order.\n *\n * A step is either another rule, or a terminal description of a token. If it\n * is a rule, that rule is pushed onto the stack and the parsing continues from\n * that point.\n *\n * If it is a terminal description, the token is checked against it using a\n * `match` function. If the match is successful, the token is colored and the\n * rule is stepped forward. If the match is unsuccessful, the remainder of the\n * rule is skipped and the previous rule is advanced.\n *\n * This parsing algorithm allows for incremental online parsing within various\n * levels of the syntax tree and results in a structured `state` linked-list\n * which contains the relevant information to produce valuable typeaheads.\n */\n_codemirror[\"default\"].defineMode('graphql', function (config) {\n  var parser = (0, _graphqlLanguageServiceParser.onlineParser)({\n    eatWhitespace: function eatWhitespace(stream) {\n      return stream.eatWhile(_graphqlLanguageServiceParser.isIgnored);\n    },\n    lexRules: _graphqlLanguageServiceParser.LexRules,\n    parseRules: _graphqlLanguageServiceParser.ParseRules,\n    editorConfig: {\n      tabSize: config.tabSize\n    }\n  });\n  return {\n    config: config,\n    startState: parser.startState,\n    token: parser.token,\n    indent: indent,\n    electricInput: /^\\s*[})\\]]/,\n    fold: 'brace',\n    lineComment: '#',\n    closeBrackets: {\n      pairs: '()[]{}\"\"',\n      explode: '()[]{}'\n    }\n  };\n});\n\nfunction indent(state, textAfter) {\n  var levels = state.levels; // If there is no stack of levels, use the current level.\n  // Otherwise, use the top level, pre-emptively dedenting for close braces.\n\n  var level = !levels || levels.length === 0 ? state.indentLevel : levels[levels.length - 1] - (this.electricInput.test(textAfter) ? 1 : 0);\n  return level * this.config.indentUnit;\n}"},"lineCount":70}},"error":null,"hash":"29173879c8087a11569bb3140ceddbb7","cacheData":{"env":{}}}