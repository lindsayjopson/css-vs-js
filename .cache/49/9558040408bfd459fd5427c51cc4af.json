{"id":"node_modules/graphql-language-service-interface/dist/GraphQLLanguageService.js","dependencies":[{"name":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-interface/dist/GraphQLLanguageService.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/lindsayj/Documents/dev/css-vs-js/package.json","includedInParent":true,"mtime":1572464414593},{"name":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-interface/package.json","includedInParent":true,"mtime":1572464394178},{"name":"graphql","loc":{"line":3,"column":26},"parent":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-interface/dist/GraphQLLanguageService.js","resolved":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql/index.mjs"},{"name":"./getAutocompleteSuggestions","loc":{"line":4,"column":45},"parent":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-interface/dist/GraphQLLanguageService.js","resolved":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-interface/dist/getAutocompleteSuggestions.js"},{"name":"./getHoverInformation","loc":{"line":5,"column":38},"parent":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-interface/dist/GraphQLLanguageService.js","resolved":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-interface/dist/getHoverInformation.js"},{"name":"./getDiagnostics","loc":{"line":6,"column":33},"parent":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-interface/dist/GraphQLLanguageService.js","resolved":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-interface/dist/getDiagnostics.js"},{"name":"./getDefinition","loc":{"line":7,"column":32},"parent":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-interface/dist/GraphQLLanguageService.js","resolved":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-interface/dist/getDefinition.js"},{"name":"graphql-language-service-utils","loc":{"line":8,"column":49},"parent":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-interface/dist/GraphQLLanguageService.js","resolved":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/graphql-language-service-utils/dist/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst graphql_1 = require(\"graphql\");\nconst getAutocompleteSuggestions_1 = require(\"./getAutocompleteSuggestions\");\nconst getHoverInformation_1 = require(\"./getHoverInformation\");\nconst getDiagnostics_1 = require(\"./getDiagnostics\");\nconst getDefinition_1 = require(\"./getDefinition\");\nconst graphql_language_service_utils_1 = require(\"graphql-language-service-utils\");\nconst { FRAGMENT_DEFINITION, OBJECT_TYPE_DEFINITION, INTERFACE_TYPE_DEFINITION, ENUM_TYPE_DEFINITION, UNION_TYPE_DEFINITION, SCALAR_TYPE_DEFINITION, INPUT_OBJECT_TYPE_DEFINITION, SCALAR_TYPE_EXTENSION, OBJECT_TYPE_EXTENSION, INTERFACE_TYPE_EXTENSION, UNION_TYPE_EXTENSION, ENUM_TYPE_EXTENSION, INPUT_OBJECT_TYPE_EXTENSION, DIRECTIVE_DEFINITION, FRAGMENT_SPREAD, OPERATION_DEFINITION, NAMED_TYPE, } = graphql_1.Kind;\nclass GraphQLLanguageService {\n    constructor(cache) {\n        this._graphQLCache = cache;\n        this._graphQLConfig = cache.getGraphQLConfig();\n    }\n    getConfigForURI(uri) {\n        const config = this._graphQLConfig.getConfigForFile(uri);\n        if (config) {\n            return config;\n        }\n        throw Error(`No config found for uri: ${uri}`);\n    }\n    async getDiagnostics(query, uri, isRelayCompatMode) {\n        let queryHasExtensions = false;\n        const projectConfig = this.getConfigForURI(uri);\n        const { schemaPath, projectName, extensions } = projectConfig;\n        try {\n            const queryAST = graphql_1.parse(query);\n            if (!schemaPath || uri !== schemaPath) {\n                queryHasExtensions = queryAST.definitions.some(definition => {\n                    switch (definition.kind) {\n                        case OBJECT_TYPE_DEFINITION:\n                        case INTERFACE_TYPE_DEFINITION:\n                        case ENUM_TYPE_DEFINITION:\n                        case UNION_TYPE_DEFINITION:\n                        case SCALAR_TYPE_DEFINITION:\n                        case INPUT_OBJECT_TYPE_DEFINITION:\n                        case SCALAR_TYPE_EXTENSION:\n                        case OBJECT_TYPE_EXTENSION:\n                        case INTERFACE_TYPE_EXTENSION:\n                        case UNION_TYPE_EXTENSION:\n                        case ENUM_TYPE_EXTENSION:\n                        case INPUT_OBJECT_TYPE_EXTENSION:\n                        case DIRECTIVE_DEFINITION:\n                            return true;\n                    }\n                    return false;\n                });\n            }\n        }\n        catch (error) {\n            const range = getDiagnostics_1.getRange(error.locations[0], query);\n            return [\n                {\n                    severity: getDiagnostics_1.SEVERITY.ERROR,\n                    message: error.message,\n                    source: 'GraphQL: Syntax',\n                    range,\n                },\n            ];\n        }\n        let source = query;\n        const fragmentDefinitions = await this._graphQLCache.getFragmentDefinitions(projectConfig);\n        const fragmentDependencies = await this._graphQLCache.getFragmentDependencies(query, fragmentDefinitions);\n        const dependenciesSource = fragmentDependencies.reduce((prev, cur) => `${prev} ${graphql_1.print(cur.definition)}`, '');\n        source = `${source} ${dependenciesSource}`;\n        let validationAst = null;\n        try {\n            validationAst = graphql_1.parse(source);\n        }\n        catch (error) {\n            return [];\n        }\n        let customRules;\n        const customRulesModulePath = extensions.customValidationRules;\n        if (customRulesModulePath) {\n            const rulesPath = require.resolve(`${customRulesModulePath}`);\n            if (rulesPath) {\n                customRules = require(`${rulesPath}`)(this._graphQLConfig);\n            }\n        }\n        const schema = await this._graphQLCache\n            .getSchema(projectName, queryHasExtensions)\n            .catch(() => null);\n        if (!schema) {\n            return [];\n        }\n        return getDiagnostics_1.validateQuery(validationAst, schema, customRules, isRelayCompatMode);\n    }\n    async getAutocompleteSuggestions(query, position, filePath) {\n        const projectConfig = this.getConfigForURI(filePath);\n        const schema = await this._graphQLCache\n            .getSchema(projectConfig.projectName)\n            .catch(() => null);\n        if (schema) {\n            return getAutocompleteSuggestions_1.getAutocompleteSuggestions(schema, query, position);\n        }\n        return [];\n    }\n    async getHoverInformation(query, position, filePath) {\n        const projectConfig = this.getConfigForURI(filePath);\n        const schema = await this._graphQLCache\n            .getSchema(projectConfig.projectName)\n            .catch(() => null);\n        if (schema) {\n            return getHoverInformation_1.getHoverInformation(schema, query, position);\n        }\n        return '';\n    }\n    async getDefinition(query, position, filePath) {\n        const projectConfig = this.getConfigForURI(filePath);\n        let ast;\n        try {\n            ast = graphql_1.parse(query);\n        }\n        catch (error) {\n            return null;\n        }\n        const node = graphql_language_service_utils_1.getASTNodeAtPosition(query, ast, position);\n        if (node) {\n            switch (node.kind) {\n                case FRAGMENT_SPREAD:\n                    return this._getDefinitionForFragmentSpread(query, ast, node, filePath, projectConfig);\n                case FRAGMENT_DEFINITION:\n                case OPERATION_DEFINITION:\n                    return getDefinition_1.getDefinitionQueryResultForDefinitionNode(filePath, query, node);\n                case NAMED_TYPE:\n                    return this._getDefinitionForNamedType(query, ast, node, filePath, projectConfig);\n            }\n        }\n        return null;\n    }\n    async _getDefinitionForNamedType(query, ast, node, filePath, projectConfig) {\n        const objectTypeDefinitions = await this._graphQLCache.getObjectTypeDefinitions(projectConfig);\n        const dependencies = await this._graphQLCache.getObjectTypeDependenciesForAST(ast, objectTypeDefinitions);\n        const localObjectTypeDefinitions = ast.definitions.filter(definition => definition.kind === OBJECT_TYPE_DEFINITION ||\n            definition.kind === INPUT_OBJECT_TYPE_DEFINITION ||\n            definition.kind === ENUM_TYPE_DEFINITION);\n        const typeCastedDefs = localObjectTypeDefinitions;\n        const localOperationDefinationInfos = typeCastedDefs.map((definition) => ({\n            filePath,\n            content: query,\n            definition,\n        }));\n        const result = await getDefinition_1.getDefinitionQueryResultForNamedType(query, node, dependencies.concat(localOperationDefinationInfos));\n        return result;\n    }\n    async _getDefinitionForFragmentSpread(query, ast, node, filePath, projectConfig) {\n        const fragmentDefinitions = await this._graphQLCache.getFragmentDefinitions(projectConfig);\n        const dependencies = await this._graphQLCache.getFragmentDependenciesForAST(ast, fragmentDefinitions);\n        const localFragDefinitions = ast.definitions.filter(definition => definition.kind === FRAGMENT_DEFINITION);\n        const typeCastedDefs = localFragDefinitions;\n        const localFragInfos = typeCastedDefs.map((definition) => ({\n            filePath,\n            content: query,\n            definition,\n        }));\n        const result = await getDefinition_1.getDefinitionQueryResultForFragmentSpread(query, node, dependencies.concat(localFragInfos));\n        return result;\n    }\n}\nexports.GraphQLLanguageService = GraphQLLanguageService;\n"},"sourceMaps":{"js":{"version":3,"file":"GraphQLLanguageService.js","sourceRoot":"","sources":["../src/GraphQLLanguageService.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"73a806057cf022375bb2f6fde088e071","cacheData":{"env":{}}}