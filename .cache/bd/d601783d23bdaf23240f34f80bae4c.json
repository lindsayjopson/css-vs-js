{"id":"node_modules/codemirror/addon/comment/comment.js","dependencies":[{"name":"/Users/lindsayj/Documents/dev/css-vs-js/package.json","includedInParent":true,"mtime":1572464414593},{"name":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/codemirror/package.json","includedInParent":true,"mtime":1572464394178},{"name":"../../lib/codemirror","loc":{"line":6,"column":16},"parent":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/codemirror/addon/comment/comment.js","resolved":"/Users/lindsayj/Documents/dev/css-vs-js/node_modules/codemirror/lib/codemirror.js"}],"generated":{"js":"var define;\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var noOptions = {};\n  var nonWS = /[^\\s\\u00a0]/;\n  var Pos = CodeMirror.Pos;\n\n  function firstNonWS(str) {\n    var found = str.search(nonWS);\n    return found == -1 ? 0 : found;\n  }\n\n  CodeMirror.commands.toggleComment = function(cm) {\n    cm.toggleComment();\n  };\n\n  CodeMirror.defineExtension(\"toggleComment\", function(options) {\n    if (!options) options = noOptions;\n    var cm = this;\n    var minLine = Infinity, ranges = this.listSelections(), mode = null;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      if (from.line >= minLine) continue;\n      if (to.line >= minLine) to = Pos(minLine, 0);\n      minLine = from.line;\n      if (mode == null) {\n        if (cm.uncomment(from, to, options)) mode = \"un\";\n        else { cm.lineComment(from, to, options); mode = \"line\"; }\n      } else if (mode == \"un\") {\n        cm.uncomment(from, to, options);\n      } else {\n        cm.lineComment(from, to, options);\n      }\n    }\n  });\n\n  // Rough heuristic to try and detect lines that are part of multi-line string\n  function probablyInsideString(cm, pos, line) {\n    return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line)\n  }\n\n  function getMode(cm, pos) {\n    var mode = cm.getMode()\n    return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos)\n  }\n\n  CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var firstLine = self.getLine(from.line);\n    if (firstLine == null || probablyInsideString(self, from, firstLine)) return;\n\n    var commentString = options.lineComment || mode.lineComment;\n    if (!commentString) {\n      if (options.blockCommentStart || mode.blockCommentStart) {\n        options.fullLines = true;\n        self.blockComment(from, to, options);\n      }\n      return;\n    }\n\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n    var pad = options.padding == null ? \" \" : options.padding;\n    var blankLines = options.commentBlankLines || from.line == to.line;\n\n    self.operation(function() {\n      if (options.indent) {\n        var baseString = null;\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i);\n          var whitespace = line.slice(0, firstNonWS(line));\n          if (baseString == null || baseString.length > whitespace.length) {\n            baseString = whitespace;\n          }\n        }\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i), cut = baseString.length;\n          if (!blankLines && !nonWS.test(line)) continue;\n          if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n          self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n        }\n      } else {\n        for (var i = from.line; i < end; ++i) {\n          if (blankLines || nonWS.test(self.getLine(i)))\n            self.replaceRange(commentString + pad, Pos(i, 0));\n        }\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) {\n      if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n        self.lineComment(from, to, options);\n      return;\n    }\n    if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0)))) return\n\n    var end = Math.min(to.line, self.lastLine());\n    if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n\n    var pad = options.padding == null ? \" \" : options.padding;\n    if (from.line > end) return;\n\n    self.operation(function() {\n      if (options.fullLines != false) {\n        var lastLineHasText = nonWS.test(self.getLine(end));\n        self.replaceRange(pad + endString, Pos(end));\n        self.replaceRange(startString + pad, Pos(from.line, 0));\n        var lead = options.blockCommentLead || mode.blockCommentLead;\n        if (lead != null) for (var i = from.line + 1; i <= end; ++i)\n          if (i != end || lastLineHasText)\n            self.replaceRange(lead + pad, Pos(i, 0));\n      } else {\n        self.replaceRange(endString, to);\n        self.replaceRange(startString, from);\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n\n    // Try finding line comments\n    var lineString = options.lineComment || mode.lineComment, lines = [];\n    var pad = options.padding == null ? \" \" : options.padding, didSomething;\n    lineComment: {\n      if (!lineString) break lineComment;\n      for (var i = start; i <= end; ++i) {\n        var line = self.getLine(i);\n        var found = line.indexOf(lineString);\n        if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n        if (found == -1 && nonWS.test(line)) break lineComment;\n        if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n        lines.push(line);\n      }\n      self.operation(function() {\n        for (var i = start; i <= end; ++i) {\n          var line = lines[i - start];\n          var pos = line.indexOf(lineString), endPos = pos + lineString.length;\n          if (pos < 0) continue;\n          if (line.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n          didSomething = true;\n          self.replaceRange(\"\", Pos(i, pos), Pos(i, endPos));\n        }\n      });\n      if (didSomething) return true;\n    }\n\n    // Try block comments\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) return false;\n    var lead = options.blockCommentLead || mode.blockCommentLead;\n    var startLine = self.getLine(start), open = startLine.indexOf(startString)\n    if (open == -1) return false\n    var endLine = end == start ? startLine : self.getLine(end)\n    var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n    var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1)\n    if (close == -1 ||\n        !/comment/.test(self.getTokenTypeAt(insideStart)) ||\n        !/comment/.test(self.getTokenTypeAt(insideEnd)) ||\n        self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n      return false;\n\n    // Avoid killing block comments completely outside the selection.\n    // Positions of the last startString before the start of the selection, and the first endString after it.\n    var lastStart = startLine.lastIndexOf(startString, from.ch);\n    var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n    if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n    // Positions of the first endString after the end of the selection, and the last startString before it.\n    firstEnd = endLine.indexOf(endString, to.ch);\n    var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n    lastStart = (firstEnd == -1 || almostLastStart == -1) ? -1 : to.ch + almostLastStart;\n    if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n\n    self.operation(function() {\n      self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)),\n                        Pos(end, close + endString.length));\n      var openEnd = open + startString.length;\n      if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n      self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n      if (lead) for (var i = start + 1; i <= end; ++i) {\n        var line = self.getLine(i), found = line.indexOf(lead);\n        if (found == -1 || nonWS.test(line.slice(0, found))) continue;\n        var foundEnd = found + lead.length;\n        if (pad && line.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n        self.replaceRange(\"\", Pos(i, found), Pos(i, foundEnd));\n      }\n    });\n    return true;\n  });\n});\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/codemirror/addon/comment/comment.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}}],"sources":{"node_modules/codemirror/addon/comment/comment.js":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var noOptions = {};\n  var nonWS = /[^\\s\\u00a0]/;\n  var Pos = CodeMirror.Pos;\n\n  function firstNonWS(str) {\n    var found = str.search(nonWS);\n    return found == -1 ? 0 : found;\n  }\n\n  CodeMirror.commands.toggleComment = function(cm) {\n    cm.toggleComment();\n  };\n\n  CodeMirror.defineExtension(\"toggleComment\", function(options) {\n    if (!options) options = noOptions;\n    var cm = this;\n    var minLine = Infinity, ranges = this.listSelections(), mode = null;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      if (from.line >= minLine) continue;\n      if (to.line >= minLine) to = Pos(minLine, 0);\n      minLine = from.line;\n      if (mode == null) {\n        if (cm.uncomment(from, to, options)) mode = \"un\";\n        else { cm.lineComment(from, to, options); mode = \"line\"; }\n      } else if (mode == \"un\") {\n        cm.uncomment(from, to, options);\n      } else {\n        cm.lineComment(from, to, options);\n      }\n    }\n  });\n\n  // Rough heuristic to try and detect lines that are part of multi-line string\n  function probablyInsideString(cm, pos, line) {\n    return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line)\n  }\n\n  function getMode(cm, pos) {\n    var mode = cm.getMode()\n    return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos)\n  }\n\n  CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var firstLine = self.getLine(from.line);\n    if (firstLine == null || probablyInsideString(self, from, firstLine)) return;\n\n    var commentString = options.lineComment || mode.lineComment;\n    if (!commentString) {\n      if (options.blockCommentStart || mode.blockCommentStart) {\n        options.fullLines = true;\n        self.blockComment(from, to, options);\n      }\n      return;\n    }\n\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n    var pad = options.padding == null ? \" \" : options.padding;\n    var blankLines = options.commentBlankLines || from.line == to.line;\n\n    self.operation(function() {\n      if (options.indent) {\n        var baseString = null;\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i);\n          var whitespace = line.slice(0, firstNonWS(line));\n          if (baseString == null || baseString.length > whitespace.length) {\n            baseString = whitespace;\n          }\n        }\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i), cut = baseString.length;\n          if (!blankLines && !nonWS.test(line)) continue;\n          if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n          self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n        }\n      } else {\n        for (var i = from.line; i < end; ++i) {\n          if (blankLines || nonWS.test(self.getLine(i)))\n            self.replaceRange(commentString + pad, Pos(i, 0));\n        }\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) {\n      if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n        self.lineComment(from, to, options);\n      return;\n    }\n    if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0)))) return\n\n    var end = Math.min(to.line, self.lastLine());\n    if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n\n    var pad = options.padding == null ? \" \" : options.padding;\n    if (from.line > end) return;\n\n    self.operation(function() {\n      if (options.fullLines != false) {\n        var lastLineHasText = nonWS.test(self.getLine(end));\n        self.replaceRange(pad + endString, Pos(end));\n        self.replaceRange(startString + pad, Pos(from.line, 0));\n        var lead = options.blockCommentLead || mode.blockCommentLead;\n        if (lead != null) for (var i = from.line + 1; i <= end; ++i)\n          if (i != end || lastLineHasText)\n            self.replaceRange(lead + pad, Pos(i, 0));\n      } else {\n        self.replaceRange(endString, to);\n        self.replaceRange(startString, from);\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n\n    // Try finding line comments\n    var lineString = options.lineComment || mode.lineComment, lines = [];\n    var pad = options.padding == null ? \" \" : options.padding, didSomething;\n    lineComment: {\n      if (!lineString) break lineComment;\n      for (var i = start; i <= end; ++i) {\n        var line = self.getLine(i);\n        var found = line.indexOf(lineString);\n        if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n        if (found == -1 && nonWS.test(line)) break lineComment;\n        if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n        lines.push(line);\n      }\n      self.operation(function() {\n        for (var i = start; i <= end; ++i) {\n          var line = lines[i - start];\n          var pos = line.indexOf(lineString), endPos = pos + lineString.length;\n          if (pos < 0) continue;\n          if (line.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n          didSomething = true;\n          self.replaceRange(\"\", Pos(i, pos), Pos(i, endPos));\n        }\n      });\n      if (didSomething) return true;\n    }\n\n    // Try block comments\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) return false;\n    var lead = options.blockCommentLead || mode.blockCommentLead;\n    var startLine = self.getLine(start), open = startLine.indexOf(startString)\n    if (open == -1) return false\n    var endLine = end == start ? startLine : self.getLine(end)\n    var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n    var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1)\n    if (close == -1 ||\n        !/comment/.test(self.getTokenTypeAt(insideStart)) ||\n        !/comment/.test(self.getTokenTypeAt(insideEnd)) ||\n        self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n      return false;\n\n    // Avoid killing block comments completely outside the selection.\n    // Positions of the last startString before the start of the selection, and the first endString after it.\n    var lastStart = startLine.lastIndexOf(startString, from.ch);\n    var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n    if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n    // Positions of the first endString after the end of the selection, and the last startString before it.\n    firstEnd = endLine.indexOf(endString, to.ch);\n    var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n    lastStart = (firstEnd == -1 || almostLastStart == -1) ? -1 : to.ch + almostLastStart;\n    if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n\n    self.operation(function() {\n      self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)),\n                        Pos(end, close + endString.length));\n      var openEnd = open + startString.length;\n      if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n      self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n      if (lead) for (var i = start + 1; i <= end; ++i) {\n        var line = self.getLine(i), found = line.indexOf(lead);\n        if (found == -1 || nonWS.test(line.slice(0, found))) continue;\n        var foundEnd = found + lead.length;\n        if (pad && line.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n        self.replaceRange(\"\", Pos(i, found), Pos(i, foundEnd));\n      }\n    });\n    return true;\n  });\n});\n"},"lineCount":211}},"error":null,"hash":"4d45253d3c3656bb0cdc65a61d9c9398","cacheData":{"env":{}}}